# name: test/sql/find_address.test
# description: address lookup via QCK2 trie + find_address() (behaviour parity with Python reference)
# group: [sql]

require splink_udfs

# -----------------------------------------------------------------------------
# Test data + trie build (matches the Python rows[] with one duplicate for ambiguity)
# -----------------------------------------------------------------------------

statement ok
CREATE TEMP TABLE rows(uprn BIGINT, addr VARCHAR);

statement ok
INSERT INTO rows VALUES
    (2,  'ANNEX 7 LOVE LANE KINGS LANGLEY'),
    (3,  '1 LOVE LANE KINGS LANGLEY'),
    (4,  '2 LOVE LANE KINGS LANGLEY'),
    (5,  '3 LOVE LANE KINGS LANGLEY'),
    (6,  '4 LOVE LANE KINGS LANGLEY'),
    (7,  '5 LOVE LANE KINGS LANGLEY'),
    (8,  '6 LOVE LANE KINGS LANGLEY'),
    (9,  '7 LOVE LANE KINGS LANGLEY'),
    (10, 'MY LONG BUSINESS NAME 9 LOVE LANE KINGS LANGLEY'),

# Build the reverse suffix trie blob from tokens
statement ok
CREATE TEMP TABLE trie_blob AS
WITH toks AS (
  SELECT uprn, string_split(addr, ' ') AS tokens
  FROM rows
)
SELECT build_suffix_trie(uprn, tokens) AS b
FROM toks;

# Convenience macro: split a messy string into token list
statement ok
CREATE MACRO tok(s) AS string_split(s, ' ');

# Sanity: the blob exists
query I
SELECT typeof((SELECT b FROM trie_blob));
----
BLOB


query I
SELECT find_address(tok('1 LOVE LANE KINGS LANGLEY'), (SELECT b FROM trie_blob));
----
3

query I
SELECT find_address(tok('1 LOVE LANE KINGS LANGLEY HERTFORDSHIRE'), (SELECT b FROM trie_blob));
----
3

query I
SELECT find_address(tok('1 LOVE LANE KINGS LANGLEY HERTFORDSHIRE ENGLAND'), (SELECT b FROM trie_blob));
----
3

query I
SELECT find_address(tok('1 LOVE LANE KINGS'), (SELECT b FROM trie_blob));
----
NULL
